import React, { useState } from "react";
import axios from "axios";
import { useDropzone } from "react-dropzone";
import Papa from "papaparse";

function App() {
  const [files, setFiles] = useState([]);
  const [previews, setPreviews] = useState([]);
  const [csvData, setCsvData] = useState(null);
  const [isCsvLoaded, setIsCsvLoaded] = useState(false);
  const [selectedRow, setSelectedRow] = useState(null);
  const [expandedRow, setExpandedRow] = useState(null);

  const LAMBDA_URL = "https://your-lambda-url.amazonaws.com/endpoint";

  const onDrop = (acceptedFiles) => {
    const validFiles = acceptedFiles.filter((file) =>
      ["image/png", "image/jpeg", "image/jpg"].includes(file.type)
    );

    if (validFiles.length !== acceptedFiles.length) {
      alert("Some files were rejected. Only PNG, JPG, and JPEG are allowed.");
    }

    setFiles((prevFiles) => [...prevFiles, ...validFiles]);

    const newPreviews = validFiles.map(() => ({
      isLoading: true,
      url: null,
    }));
    setPreviews((prevPreviews) => [...prevPreviews, ...newPreviews]);

    validFiles.forEach((file, index) => {
      const reader = new FileReader();
      reader.onload = () => {
        setPreviews((prevPreviews) => {
          const updatedPreviews = [...prevPreviews];
          updatedPreviews[prevPreviews.length - validFiles.length + index] = {
            isLoading: false,
            url: reader.result,
          };
          return updatedPreviews;
        });
      };
      reader.readAsDataURL(file);
    });
  };

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      "image/jpeg": [".jpg", ".jpeg"],
      "image/png": [".png"],
    },
  });

  const loadCsv = () => {
    fetch("/1.csv")
      .then((response) => response.text())
      .then((csvText) => {
        Papa.parse(csvText, {
          header: true,
          complete: (results) => {
            setCsvData(results.data);
            setIsCsvLoaded(true);
          },
        });
      })
      .catch((error) => {
        console.error("Error loading the CSV file:", error);
        alert("Failed to load CSV file.");
      });
  };

  return (
    <div
      style={{
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        minHeight: "100vh",
        fontFamily: "'Roboto', sans-serif",
        backgroundColor: "#f9f9f9",
        padding: "20px",
      }}
    >
      <div
        style={{
          width: "800px",
          padding: "30px",
          border: "1px solid #ddd",
          borderRadius: "10px",
          boxShadow: "0 4px 8px rgba(0,0,0,0.1)",
          backgroundColor: "#fff",
        }}
      >
        {!isCsvLoaded ? (
          <>
            <h1 style={{ textAlign: "center", color: "#333" }}>Select Images</h1>
            <form
              onSubmit={(e) => {
                e.preventDefault();
                loadCsv();
              }}
            >
              <div
                {...getRootProps()}
                style={{
                  border: "2px dashed #007bff",
                  borderRadius: "8px",
                  padding: "15px",
                  textAlign: "center",
                  cursor: "pointer",
                  backgroundColor: isDragActive ? "#eaf6ff" : "#f9f9f9",
                  marginBottom: "15px",
                }}
              >
                <input {...getInputProps()} />
                {isDragActive ? (
                  <p style={{ color: "#007bff" }}>Drop the files here...</p>
                ) : (
                  <p style={{ color: "#555" }}>
                    Select Images OR Drag & Drop Images here...
                  </p>
                )}
              </div>

              {previews.length > 0 && (
                <div
                  style={{
                    maxHeight: "300px",
                    overflowY: "auto",
                    border: "1px solid #ddd",
                    borderRadius: "8px",
                    padding: "10px",
                    marginTop: "15px",
                  }}
                >
                  <div
                    style={{
                      display: "flex",
                      flexWrap: "wrap",
                      gap: "10px",
                      justifyContent: "center",
                    }}
                  >
                    {previews.map((preview, index) => (
                      <div
                        key={index}
                        style={{
                          width: "80px",
                          height: "80px",
                          borderRadius: "5px",
                          overflow: "hidden",
                          border: "1px solid #ddd",
                          display: "flex",
                          justifyContent: "center",
                          alignItems: "center",
                        }}
                      >
                        {preview.isLoading ? (
                          <div
                            style={{
                              width: "30px",
                              height: "30px",
                              border: "4px solid #ccc",
                              borderTop: "4px solid #007bff",
                              borderRadius: "50%",
                              animation: "spin 1s linear infinite",
                            }}
                          ></div>
                        ) : (
                          <img
                            src={preview.url}
                            alt={`Preview ${index + 1}`}
                            style={{
                              width: "100%",
                              height: "100%",
                              objectFit: "cover",
                            }}
                          />
                        )}
                      </div>
                    ))}
                  </div>
                </div>
              )}

              <div style={{ textAlign: "center", marginTop: "20px" }}>
                <button
                  type="submit"
                  style={{
                    backgroundColor: "#007bff",
                    color: "#fff",
                    border: "none",
                    padding: "10px 20px",
                    borderRadius: "5px",
                    cursor: "pointer",
                    fontSize: "16px",
                  }}
                >
                  Upload
                </button>
              </div>
            </form>
          </>
        ) : (
          <div>
            <div
              style={{
                maxHeight: "400px",
                overflowY: "auto",
              }}
            >
              <table
                style={{
                  width: "100%",
                  borderCollapse: "collapse",
                }}
              >
                <thead>
                  <tr
                    style={{
                      backgroundColor: "#007bff",
                      color: "#fff",
                    }}
                  >
                    {csvData[0] &&
                      Object.keys(csvData[0])
                        .slice(0, 3) // Show only the first 3 columns
                        .map((header) => (
                          <th
                            key={header}
                            style={{
                              padding: "10px",
                              border: "1px solid #ddd",
                            }}
                          >
                            {header}
                          </th>
                        ))}
                    <th
                      style={{
                        padding: "10px",
                        border: "1px solid #ddd",
                      }}
                    >
                      Details
                    </th>
                  </tr>
                </thead>
                <tbody>
                  {csvData
                    .filter((row) => Object.values(row).some((value) => value)) // Filter out empty rows
                    .map((row, index) => (
                      <tr key={index}>
                        {/* First column as image */}
                        <td
                          style={{
                            border: "1px solid #ddd",
                            padding: "10px",
                            textAlign: "center",
                          }}
                        >
                          {row[Object.keys(row)[0]] && (
                            <img
                              src={row[Object.keys(row)[0]]} // Directly use the image URL
                              alt={`Image ${index + 1}`}
                              style={{
                                width: "60px", // Adjust size as needed
                                height: "60px",
                                objectFit: "cover",
                                borderRadius: "5px",
                              }}
                              onError={(e) => (e.target.style.display = "none")} // Hide if the image fails to load
                            />
                          )}
                        </td>

                        {/* Next two columns */}
                        {Object.values(row)
                          .slice(1, 3)
                          .map((value, cellIndex) => (
                            <td
                              key={cellIndex}
                              style={{
                                border: "1px solid #ddd",
                                padding: "10px",
                                textAlign: "left",
                              }}
                            >
                              {value}
                            </td>
                          ))}

                        {/* More Details Button */}
                        <td
                          style={{
                            border: "1px solid #ddd",
                            padding: "10px",
                            textAlign: "center",
                          }}
                        >
                          <i
                            className="fa-light fa-circle-info"  // Font Awesome information icon
                            onClick={() => setExpandedRow(row)} // Trigger the same action as the button
                            style={{
                              color: "#007bff",
                              fontSize: "24px",
                              cursor: "pointer",
                            }}
                          />
                        </td>
                      </tr>
                    ))}
                </tbody>
              </table>
            </div>
            {/* Popup for showing and editing all details */}
            {expandedRow && (
              <div
                style={{
                  position: "fixed",
                  top: "50%",
                  left: "50%",
                  transform: "translate(-50%, -50%)",
                  width: "80%",
                  maxHeight: "80%",
                  overflowY: "auto", // Enable vertical scrolling
                  backgroundColor: "#fff",
                  border: "1px solid #ddd",
                  borderRadius: "10px",
                  boxShadow: "0 4px 8px rgba(0,0,0,0.2)",
                  padding: "20px",
                  zIndex: 1000,
                }}
              >
                <h2 style={{ textAlign: "center", marginBottom: "20px", color: "#333" }}>
                  Product Details
                </h2>

                {/* Display image */}
                <div style={{ textAlign: "center", marginBottom: "20px" }}>
                  {expandedRow[Object.keys(expandedRow)[0]] && (
                    <img
                      src={expandedRow[Object.keys(expandedRow)[0]]} // Use the image URL from the first column
                      alt="Popup Image"
                      style={{
                        maxWidth: "300px", // Adjust size as needed
                        maxHeight: "300px",
                        objectFit: "contain",
                        borderRadius: "5px",
                        border: "1px solid #ddd",
                      }}
                    />
                  )}
                </div>

                {/* Editable table of details */}
                <table
                  style={{
                    width: "100%",
                    borderCollapse: "collapse",
                    marginTop: "10px",
                  }}
                >
                  <tbody>
                    {Object.entries(expandedRow)
                      .slice(1) // Skip the first column (image URL)
                      .map(([key, value], index) => (
                        <tr
                          key={index}
                          style={{
                            borderBottom: "1px solid #ddd",
                          }}
                        >
                          <td
                            style={{
                              fontWeight: "bold",
                              padding: "10px",
                              textAlign: "left",
                              backgroundColor: "#f9f9f9",
                            }}
                          >
                            {key}
                          </td>
                          <td
                            style={{
                              padding: "10px",
                              textAlign: "left",
                            }}
                          >
                            <textarea
                              value={value}
                              onChange={(e) => {
                                const updatedRow = { ...expandedRow };
                                updatedRow[key] = e.target.value;
                                setExpandedRow(updatedRow);
                              }}
                              style={{
                                width: "100%",
                                minHeight: "100px", // Provide enough space for multi-line input
                                padding: "10px",
                                border: "1px solid #ddd",
                                borderRadius: "5px",
                                resize: "vertical", // Allow vertical resizing
                                fontSize: "14px", // Adjust text size
                                lineHeight: "1.5", // Improve readability
                              }}
                            />
                          </td>
                        </tr>
                      ))}
                  </tbody>
                </table>

                {/* Buttons */}
                <div style={{ textAlign: "center", marginTop: "20px" }}>
                  <button
                    onClick={async () => {
                      // Save updated row to backend
                      try {
                        const response = await fetch("/api/save-csv", {
                          method: "POST",
                          headers: {
                            "Content-Type": "application/json",
                          },
                          body: JSON.stringify(expandedRow),
                        });
                        if (response.ok) {
                          alert("Row updated successfully!");
                          const updatedCsvData = csvData.map((row) =>
                            row === expandedRow ? expandedRow : row
                          );
                          setCsvData(updatedCsvData); // Update in-memory CSV data
                          setExpandedRow(null); // Close popup
                          loadCsv(); // Reload CSV from the file to reflect saved data
                        } else {
                          throw new Error("Failed to save data");
                        }
                      } catch (error) {
                        console.error("Error saving row:", error);
                        alert("Failed to save data. Please try again.");
                      }
                    }}
                    style={{
                      backgroundColor: "#28a745",
                      color: "#fff",
                      border: "none",
                      padding: "10px 20px",
                      borderRadius: "5px",
                      cursor: "pointer",
                      marginRight: "10px",
                    }}
                  >
                    Save
                  </button>
                  <button
                    onClick={() => setExpandedRow(null)} // Close popup without saving
                    style={{
                      backgroundColor: "#dc3545",
                      color: "#fff",
                      border: "none",
                      padding: "10px 20px",
                      borderRadius: "5px",
                      cursor: "pointer",
                    }}
                  >
                    Close
                  </button>
                </div>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
}

export default App;