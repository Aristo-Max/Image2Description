{"ast":null,"code":"const validatePattern = require('./pattern-validation');\nconst convertExpression = require('./convert-expression');\nfunction matchPattern(pattern, value) {\n  if (pattern.indexOf(',') !== -1) {\n    const patterns = pattern.split(',');\n    return patterns.indexOf(value.toString()) !== -1;\n  }\n  return pattern === value.toString();\n}\nclass TimeMatcher {\n  constructor(pattern, timezone) {\n    validatePattern(pattern);\n    this.pattern = convertExpression(pattern);\n    this.timezone = timezone;\n    this.expressions = this.pattern.split(' ');\n    this.dtf = this.timezone ? new Intl.DateTimeFormat('en-US', {\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n      hourCycle: 'h23',\n      fractionalSecondDigits: 3,\n      timeZone: this.timezone\n    }) : null;\n  }\n  match(date) {\n    date = this.apply(date);\n    const runOnSecond = matchPattern(this.expressions[0], date.getSeconds());\n    const runOnMinute = matchPattern(this.expressions[1], date.getMinutes());\n    const runOnHour = matchPattern(this.expressions[2], date.getHours());\n    const runOnDay = matchPattern(this.expressions[3], date.getDate());\n    const runOnMonth = matchPattern(this.expressions[4], date.getMonth() + 1);\n    const runOnWeekDay = matchPattern(this.expressions[5], date.getDay());\n    return runOnSecond && runOnMinute && runOnHour && runOnDay && runOnMonth && runOnWeekDay;\n  }\n  apply(date) {\n    if (this.dtf) {\n      return new Date(this.dtf.format(date));\n    }\n    return date;\n  }\n}\nmodule.exports = TimeMatcher;","map":{"version":3,"names":["validatePattern","require","convertExpression","matchPattern","pattern","value","indexOf","patterns","split","toString","TimeMatcher","constructor","timezone","expressions","dtf","Intl","DateTimeFormat","year","month","day","hour","minute","second","hourCycle","fractionalSecondDigits","timeZone","match","date","apply","runOnSecond","getSeconds","runOnMinute","getMinutes","runOnHour","getHours","runOnDay","getDate","runOnMonth","getMonth","runOnWeekDay","getDay","Date","format","module","exports"],"sources":["E:/Aristomax/Projects/Img2Des/Img2Des/client/node_modules/node-cron/src/time-matcher.js"],"sourcesContent":["const validatePattern = require('./pattern-validation');\nconst convertExpression = require('./convert-expression');\n\nfunction matchPattern(pattern, value){\n    if( pattern.indexOf(',') !== -1 ){\n        const patterns = pattern.split(',');\n        return patterns.indexOf(value.toString()) !== -1;\n    }\n    return pattern === value.toString();\n}\n\nclass TimeMatcher{\n    constructor(pattern, timezone){\n        validatePattern(pattern);\n        this.pattern = convertExpression(pattern);\n        this.timezone = timezone;\n        this.expressions = this.pattern.split(' ');\n        this.dtf = this.timezone\n            ? new Intl.DateTimeFormat('en-US', {\n                year: 'numeric',\n                month: '2-digit',\n                day: '2-digit',\n                hour: '2-digit',\n                minute: '2-digit',\n                second: '2-digit',\n                hourCycle: 'h23',\n                fractionalSecondDigits: 3,\n                timeZone: this.timezone\n            }) : null;\n    }\n\n    match(date){\n        date = this.apply(date);\n\n        const runOnSecond = matchPattern(this.expressions[0], date.getSeconds());\n        const runOnMinute = matchPattern(this.expressions[1], date.getMinutes());\n        const runOnHour = matchPattern(this.expressions[2], date.getHours());\n        const runOnDay = matchPattern(this.expressions[3], date.getDate());\n        const runOnMonth = matchPattern(this.expressions[4], date.getMonth() + 1);\n        const runOnWeekDay = matchPattern(this.expressions[5], date.getDay());\n\n        return runOnSecond && runOnMinute && runOnHour && runOnDay && runOnMonth && runOnWeekDay;\n    }\n\n    apply(date){\n        if(this.dtf){\n            return new Date(this.dtf.format(date));\n        }\n\n        return date;\n    }\n}\n\nmodule.exports = TimeMatcher;\n"],"mappings":"AAAA,MAAMA,eAAe,GAAGC,OAAO,CAAC,sBAAsB,CAAC;AACvD,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,sBAAsB,CAAC;AAEzD,SAASE,YAAYA,CAACC,OAAO,EAAEC,KAAK,EAAC;EACjC,IAAID,OAAO,CAACE,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;IAC7B,MAAMC,QAAQ,GAAGH,OAAO,CAACI,KAAK,CAAC,GAAG,CAAC;IACnC,OAAOD,QAAQ,CAACD,OAAO,CAACD,KAAK,CAACI,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;EACpD;EACA,OAAOL,OAAO,KAAKC,KAAK,CAACI,QAAQ,CAAC,CAAC;AACvC;AAEA,MAAMC,WAAW;EACbC,WAAWA,CAACP,OAAO,EAAEQ,QAAQ,EAAC;IAC1BZ,eAAe,CAACI,OAAO,CAAC;IACxB,IAAI,CAACA,OAAO,GAAGF,iBAAiB,CAACE,OAAO,CAAC;IACzC,IAAI,CAACQ,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,WAAW,GAAG,IAAI,CAACT,OAAO,CAACI,KAAK,CAAC,GAAG,CAAC;IAC1C,IAAI,CAACM,GAAG,GAAG,IAAI,CAACF,QAAQ,GAClB,IAAIG,IAAI,CAACC,cAAc,CAAC,OAAO,EAAE;MAC/BC,IAAI,EAAE,SAAS;MACfC,KAAK,EAAE,SAAS;MAChBC,GAAG,EAAE,SAAS;MACdC,IAAI,EAAE,SAAS;MACfC,MAAM,EAAE,SAAS;MACjBC,MAAM,EAAE,SAAS;MACjBC,SAAS,EAAE,KAAK;MAChBC,sBAAsB,EAAE,CAAC;MACzBC,QAAQ,EAAE,IAAI,CAACb;IACnB,CAAC,CAAC,GAAG,IAAI;EACjB;EAEAc,KAAKA,CAACC,IAAI,EAAC;IACPA,IAAI,GAAG,IAAI,CAACC,KAAK,CAACD,IAAI,CAAC;IAEvB,MAAME,WAAW,GAAG1B,YAAY,CAAC,IAAI,CAACU,WAAW,CAAC,CAAC,CAAC,EAAEc,IAAI,CAACG,UAAU,CAAC,CAAC,CAAC;IACxE,MAAMC,WAAW,GAAG5B,YAAY,CAAC,IAAI,CAACU,WAAW,CAAC,CAAC,CAAC,EAAEc,IAAI,CAACK,UAAU,CAAC,CAAC,CAAC;IACxE,MAAMC,SAAS,GAAG9B,YAAY,CAAC,IAAI,CAACU,WAAW,CAAC,CAAC,CAAC,EAAEc,IAAI,CAACO,QAAQ,CAAC,CAAC,CAAC;IACpE,MAAMC,QAAQ,GAAGhC,YAAY,CAAC,IAAI,CAACU,WAAW,CAAC,CAAC,CAAC,EAAEc,IAAI,CAACS,OAAO,CAAC,CAAC,CAAC;IAClE,MAAMC,UAAU,GAAGlC,YAAY,CAAC,IAAI,CAACU,WAAW,CAAC,CAAC,CAAC,EAAEc,IAAI,CAACW,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;IACzE,MAAMC,YAAY,GAAGpC,YAAY,CAAC,IAAI,CAACU,WAAW,CAAC,CAAC,CAAC,EAAEc,IAAI,CAACa,MAAM,CAAC,CAAC,CAAC;IAErE,OAAOX,WAAW,IAAIE,WAAW,IAAIE,SAAS,IAAIE,QAAQ,IAAIE,UAAU,IAAIE,YAAY;EAC5F;EAEAX,KAAKA,CAACD,IAAI,EAAC;IACP,IAAG,IAAI,CAACb,GAAG,EAAC;MACR,OAAO,IAAI2B,IAAI,CAAC,IAAI,CAAC3B,GAAG,CAAC4B,MAAM,CAACf,IAAI,CAAC,CAAC;IAC1C;IAEA,OAAOA,IAAI;EACf;AACJ;AAEAgB,MAAM,CAACC,OAAO,GAAGlC,WAAW","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}